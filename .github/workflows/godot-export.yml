name: Export Godot Game

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  export_game:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    name: Export Game with Bundled FFmpeg
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache FFmpeg Binaries
        id: cache-ffmpeg
        uses: actions/cache@v4
        with:
          path: addons/ffmpeg
          key: ffmpeg-${{ runner.os }}-linux-7.1-windows-7.1-macos-7.1-v2

      - name: Check if FFmpeg binaries exist
        id: check-ffmpeg
        run: |
          if [ -f "addons/ffmpeg/linux/ffmpeg" ] && [ -f "addons/ffmpeg/windows/ffmpeg.exe" ] && [ -f "addons/ffmpeg/macos/ffmpeg" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "All FFmpeg binaries found in cache"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "FFmpeg binaries missing, will download"
          fi

      - name: Download and Bundle FFmpeg for Linux
        if: steps.check-ffmpeg.outputs.exists != 'true'
        run: |
          # Download ffmpeg for Linux
          wget https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz
          tar xf ffmpeg-release-amd64-static.tar.xz
          cp ffmpeg-*-amd64-static/ffmpeg addons/ffmpeg/linux/
          chmod +x addons/ffmpeg/linux/ffmpeg
          # Copy license/readme files if they exist
          cp ffmpeg-*-amd64-static/GPLv3.txt addons/ffmpeg/linux/ 2>/dev/null || true
          cp ffmpeg-*-amd64-static/readme.txt addons/ffmpeg/linux/ 2>/dev/null || true
          rm -rf ffmpeg-release-amd64-static.tar.xz ffmpeg-*-amd64-static
          echo "Linux ffmpeg bundled"

      - name: Download and Bundle FFmpeg for Windows
        if: steps.check-ffmpeg.outputs.exists != 'true'
        run: |
          # Download ffmpeg for Windows
          wget https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip
          unzip -q ffmpeg-release-essentials.zip
          cp ffmpeg-*-essentials_build/bin/ffmpeg.exe addons/ffmpeg/windows/
          # Copy license/readme files if they exist
          cp ffmpeg-*-essentials_build/LICENSE addons/ffmpeg/windows/ 2>/dev/null || true
          cp ffmpeg-*-essentials_build/README.txt addons/ffmpeg/windows/ 2>/dev/null || true
          rm -rf ffmpeg-release-essentials.zip ffmpeg-*-essentials_build
          echo "Windows ffmpeg bundled"

      - name: Download and Bundle FFmpeg for macOS
        if: steps.check-ffmpeg.outputs.exists != 'true'
        run: |
          # Download ffmpeg for macOS (Intel + Apple Silicon universal binary)
          wget https://evermeet.cx/ffmpeg/ffmpeg-7.1.zip
          unzip -q ffmpeg-7.1.zip
          mv ffmpeg addons/ffmpeg/macos/
          chmod +x addons/ffmpeg/macos/ffmpeg
          # evermeet.cx builds are GPLv3, create a note about it
          echo "This FFmpeg binary is licensed under GPLv3. See FFMPEG_LICENSE.txt for details." > addons/ffmpeg/macos/LICENSE.txt
          rm -rf ffmpeg-7.1.zip
          echo "macOS ffmpeg bundled"

      - name: Verify FFmpeg Binaries
        run: |
          echo "Checking bundled ffmpeg files:"
          ls -lh addons/ffmpeg/linux/
          ls -lh addons/ffmpeg/windows/
          ls -lh addons/ffmpeg/macos/

      - name: Install Dependencies
        run: |
          # Disable man-db auto-update to speed up apt-get
          echo "set man-db/auto-update false" | sudo debconf-communicate
          sudo dpkg-reconfigure man-db
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-0

      - name: Export Game
        id: export
        uses: firebelley/godot-export@v7.0.0
        with:
          godot_executable_download_url: https://github.com/godotengine/godot/releases/download/4.5-stable/Godot_v4.5-stable_linux.x86_64.zip
          godot_export_templates_download_url: https://github.com/godotengine/godot/releases/download/4.5-stable/Godot_v4.5-stable_export_templates.tpz
          relative_project_path: ./
          archive_output: true
          cache: true

      - name: Add FFmpeg to Archives
        run: |
          echo "=== Adding ffmpeg binaries to release archives ==="
          cd ${{ steps.export.outputs.archive_directory }}

          # Function to add ffmpeg to archive
          add_ffmpeg_to_archive() {
            local archive="$1"
            local platform="$2"
            local temp_dir="${platform}_temp"

            echo "=== Processing $platform archive: $archive ==="
            echo "Original size: $(ls -lh "$archive" | awk '{print $5}')"

            unzip -q "$archive" -d "$temp_dir"

            case "$platform" in
              linux)
                mkdir -p "$temp_dir/addons/ffmpeg/linux/"
                cp ${{ github.workspace }}/addons/ffmpeg/linux/ffmpeg "$temp_dir/addons/ffmpeg/linux/"
                chmod +x "$temp_dir/addons/ffmpeg/linux/ffmpeg"
                cp ${{ github.workspace }}/addons/ffmpeg/FFMPEG_LICENSE.txt "$temp_dir/addons/ffmpeg/"
                cp ${{ github.workspace }}/addons/ffmpeg/linux/*.txt "$temp_dir/addons/ffmpeg/linux/" 2>/dev/null || true
                ;;
              windows)
                mkdir -p "$temp_dir/addons/ffmpeg/windows/"
                cp ${{ github.workspace }}/addons/ffmpeg/windows/ffmpeg.exe "$temp_dir/addons/ffmpeg/windows/"
                cp ${{ github.workspace }}/addons/ffmpeg/FFMPEG_LICENSE.txt "$temp_dir/addons/ffmpeg/"
                cp ${{ github.workspace }}/addons/ffmpeg/windows/*.txt "$temp_dir/addons/ffmpeg/windows/" 2>/dev/null || true
                cp ${{ github.workspace }}/addons/ffmpeg/windows/LICENSE "$temp_dir/addons/ffmpeg/windows/" 2>/dev/null || true
                ;;
              macos)
                # Find .app bundle and place FFmpeg in MacOS directory (same as executable)
                APP_PATH=$(find "$temp_dir" -name "*.app" -type d | head -1)
                if [ -n "$APP_PATH" ]; then
                  echo "Found app bundle: $APP_PATH"
                  mkdir -p "$APP_PATH/Contents/MacOS/addons/ffmpeg/macos/"
                  cp ${{ github.workspace }}/addons/ffmpeg/macos/ffmpeg "$APP_PATH/Contents/MacOS/addons/ffmpeg/macos/"
                  chmod +x "$APP_PATH/Contents/MacOS/addons/ffmpeg/macos/ffmpeg"
                  mkdir -p "$APP_PATH/Contents/MacOS/addons/ffmpeg/"
                  cp ${{ github.workspace }}/addons/ffmpeg/FFMPEG_LICENSE.txt "$APP_PATH/Contents/MacOS/addons/ffmpeg/"
                  cp ${{ github.workspace }}/addons/ffmpeg/macos/*.txt "$APP_PATH/Contents/MacOS/addons/ffmpeg/macos/" 2>/dev/null || true
                else
                  echo "WARNING: No .app bundle found"
                fi
                ;;
            esac

            rm -f "$archive"
            cd "$temp_dir" && zip -r "../$archive" . && cd ..
            echo "New size: $(ls -lh "$archive" | awk '{print $5}')"
            unzip -l "$archive" | grep -i ffmpeg || echo "WARNING: ffmpeg not found in archive!"
            rm -rf "$temp_dir"
          }

          # Process all archives
          for archive in *.zip; do
            if [[ "$archive" == *"inux"* ]] || [[ "$archive" == *"Linux"* ]]; then
              add_ffmpeg_to_archive "$archive" "linux"
            elif [[ "$archive" == *"indows"* ]] || [[ "$archive" == *"Windows"* ]] || [[ "$archive" == *"win"* ]]; then
              add_ffmpeg_to_archive "$archive" "windows"
            elif [[ "$archive" == *"acOS"* ]] || [[ "$archive" == *"macos"* ]] || [[ "$archive" == *"osx"* ]]; then
              add_ffmpeg_to_archive "$archive" "macos"
            fi
          done

          echo "=== All archives processed ==="
          ls -lh

      - name: Create Release
        uses: ncipollo/release-action@v1.18.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          generateReleaseNotes: true
          tag: ${{ github.ref_name }}
          artifacts: ${{ steps.export.outputs.archive_directory }}/*
          draft: false
          prerelease: false
